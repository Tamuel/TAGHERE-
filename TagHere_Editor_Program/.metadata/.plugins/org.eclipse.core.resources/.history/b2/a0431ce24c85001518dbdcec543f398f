package Data;

import java.util.ArrayList;

import FloorPlan.Building;

/**
 * Handle Data from server
 * @author DongKyu
 *
 */
public class DataProvider {
	
	/** For Singleton design pattern */
	private static DataProvider singleton = null;
	private String id;
	/** For get list of building */
	private ArrayList<Building> buildings;
	/** For get current building */
	private Building building;

	
	private DataProvider() {
		buildings = new  ArrayList<Building>();
		buildings.add(new Building("aaa"));
		buildings.add(new Building("bbb"));
		buildings.add(new Building("ccc"));
		buildings.add(new Building("aaa"));
		buildings.add(new Building("bbb"));
		buildings.add(new Building("ccc"));
		buildings.add(new Building("aaa"));
		buildings.add(new Building("bbb"));
		buildings.add(new Building("ccc"));
		buildings.add(new Building("aaa"));
		buildings.add(new Building("bbb"));
		buildings.add(new Building("ccc"));
		buildings.add(new Building("aaa"));
		buildings.add(new Building("bbb"));
		buildings.add(new Building("ccc"));
		buildings.add(new Building("ccc"));
		buildings.add(new Building("aaa"));
		buildings.add(new Building("bbb"));
		buildings.add(new Building("ccc"));
	}

	/** For Singleton design.
	 * This function provide get instance of singleton */
	public static DataProvider getInstance()
	{ 
		if(singleton == null)
		{
			singleton  = new DataProvider();
		}
		return singleton;
	}

	public ArrayList<Building> getBuildings() {
		return buildings;
	}

	public void setBuildings(ArrayList<Building> buildings) {
		this.buildings = buildings;
	}

	public Building getBuilding() {
		return building;
	}

	public void setBuilding(Building building) {
		this.building = building;
	}
}
