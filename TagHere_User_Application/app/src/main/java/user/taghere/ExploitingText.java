package user.taghere.taghere;

import android.nfc.NdefMessage;
import android.nfc.NdefRecord;
import android.nfc.Tag;
import android.nfc.tech.NdefFormatable;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;

/**
 * Created by hojaeson on 11/19/15.
 */
public class ExploitingText {

    public String readTextFromMessage(NdefMessage ndefMessage) {
        NdefRecord[] ndefRecords = ndefMessage.getRecords();

        if(ndefRecords != null && ndefRecords.length>0){

            NdefRecord ndefRecord = ndefRecords[0];

            String tagContent = getTextFromNdefRecord(ndefRecord);

            KeyValue keyvalue = new KeyValue();
            keyvalue.setKeyValue(tagContent);
            Log.i("tag content issue", tagContent);
            return keyvalue.getKeyValue();
            //KeyValueHandler handler = new KeyValueHandler();
            //handler.execute(keyvalue.getKeyValue());
            //here, we send the data to php & mysql
        }
        else{
            Log.i("tag content issue","No NDEF records found!");
            return "fail";
        }
    }


    private void formatTag(Tag tag, NdefMessage ndefMessage)
    {
        try{
            NdefFormatable ndefFormatable = NdefFormatable.get(tag);

            if(ndefFormatable == null)
            {
                Log.i("ndef issue","Tag is not ndef formidable!");
                return;
            }
            ndefFormatable.connect();
            ndefFormatable.format(ndefMessage);
            ndefFormatable.close();

            Log.i("ndef issue", "Tag Written");

        }
        catch(Exception e)
        {
            Log.e("FormatTag", e.getMessage());
        }
    }



    //tranfrom the data formatted
    private NdefRecord createTextRecord(String content)
    {
        try {
            byte[] language;
            language = Locale.getDefault().getLanguage().getBytes("UTF-8");

            final byte[] text = content.getBytes("UTF-8");
            final int languageSize = language.length;
            final int textLength = text.length;
            final ByteArrayOutputStream payload = new ByteArrayOutputStream(1 + languageSize + textLength);

            payload.write((byte) (languageSize & 0x1F));
            payload.write(language,0,languageSize);
            payload.write(text,0,textLength);

            return new NdefRecord(NdefRecord.TNF_WELL_KNOWN,NdefRecord.RTD_TEXT,new byte[0], payload.toByteArray());

        }catch(UnsupportedEncodingException e){
            Log.e("createTextRecord",e.getMessage());
        }
        return null;
    }

    private NdefMessage createNdefMessage(String content){

        NdefRecord ndefRecord = createTextRecord(content);

        NdefMessage ndefMessage = new NdefMessage((new NdefRecord[]{ndefRecord}));

        return ndefMessage;
    }

    public String getTextFromNdefRecord(NdefRecord ndefRecord)
    {
        String tagContent = null;
        try {
            byte[] payload = ndefRecord.getPayload();
            String textEncoding;
            if((payload[0] & 128) == 0) {
                textEncoding = "UTF-8";
            }
            else {
                textEncoding = "UTF-16";
            }
            int languageSize = payload[0] & 0063;
            tagContent = new String(payload, languageSize + 1,
                    payload.length - languageSize - 1, textEncoding);
        }catch (UnsupportedEncodingException e)
        {
            Log.e("getTextFromNdefRecord", e.getMessage(),e);
        }
        return tagContent;
    }

}
