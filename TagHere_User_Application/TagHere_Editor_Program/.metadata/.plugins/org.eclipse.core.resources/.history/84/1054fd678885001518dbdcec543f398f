package GUI.Frame.EditFloorPlan;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.JPanel;

import Data.ColorData;
import Data.DataProvider;
import FloorPlan.FloorPlan;
import FloorPlanObject.FPObject;
import FloorPlanObject.Line;

public class EditViewPanel extends JPanel implements MouseListener, MouseMotionListener {
	
	/** For approach parent frame */
	EditFloorPlanFrame context;
	
	/** For approach current floor plan */
	private FloorPlan floorPlan;
	
	/** New object to insert floor plan */
	private FPObject tempObject;
	
	/** Decide now drawing or not */
	private boolean drawing = false;
	
	private int cursorX;
	private int cursorY;
	
	private ArrayList<Line> lines;
	
	
	public EditViewPanel(EditFloorPlanFrame context, int width, int height, FloorPlan floorPlan) {
		super();
		this.floorPlan = floorPlan;
		this.context = context;
		this.setLayout(null);
		
		lines = new ArrayList<Line>();
		
		this.addMouseListener(this);
		this.addMouseMotionListener(this);

		this.setBackground(Color.WHITE);
		this.setBorder(BorderFactory.createLineBorder(ColorData.GRAY, 1));
		this.setPreferredSize(new Dimension(width, height));
		this.setSize(new Dimension(width, height));
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}

	@Override
	public void mousePressed(MouseEvent e) {
		if(DataProvider.getInstance().getCurrentObjectType() != null)
			switch(DataProvider.getInstance().getCurrentObjectType()) {
			case ICON:
				setDrawing(true);
				break;
				
			case LINE:
				tempObject = new Line(e.getX(), e.getY());
				lines.add((Line)tempObject);
				setDrawing(true);
				break;
				
			case OVAL:
				setDrawing(true);
				break;
				
			case RECTANGLE:
				setDrawing(true);
				break;
				
			case TAG:
				setDrawing(true);
				break;
			}
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		setDrawing(false);
		switch(DataProvider.getInstance().getCurrentObjectType()) {
		case ICON:
			break;
			
		case LINE:
			((Line)tempObject).setEndPosition(new Point(e.getX(), e.getY()));
			break;
			
		case OVAL:
			break;
			
		case RECTANGLE:
			break;
			
		case TAG:
			break;
		}
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		cursorX = e.getX();
		cursorY = e.getY();
		repaint();
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		for(Line line : lines)
			g.drawLine(
					line.getStartPosition().x,
					line.getStartPosition().y,
					line.getEndPosition().x,
					line.getEndPosition().y
					);
		
		if(isDrawing() && DataProvider.getInstance().getCurrentObjectType() != null) {
	        ((Graphics2D)g).setRenderingHint(
	        		RenderingHints.KEY_ANTIALIASING,
	        		RenderingHints.VALUE_ANTIALIAS_ON
	        		);
	        
			switch(DataProvider.getInstance().getCurrentObjectType()) {
			case ICON:
				break;
				
			case LINE:
				g.drawLine(
						tempObject.getStartPosition().x,
						tempObject.getStartPosition().y,
						cursorX,
						cursorY
						);
				break;
				
			case OVAL:
				break;
				
			case RECTANGLE:
				break;
				
			case TAG:
				break;
			}
		}
	}
	

	@Override
	public void mouseMoved(MouseEvent e) {
	}

	public boolean isDrawing() {
		return drawing;
	}

	public void setDrawing(boolean drawing) {
		this.drawing = drawing;
	}
}
