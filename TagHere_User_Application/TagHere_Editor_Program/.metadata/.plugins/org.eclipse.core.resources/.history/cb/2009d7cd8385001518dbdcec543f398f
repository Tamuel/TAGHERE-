package GUI.Frame.EditFloorPlan;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;

import javax.swing.BorderFactory;
import javax.swing.JPanel;

import Data.ColorData;
import Data.DataProvider;
import FloorPlan.FloorPlan;
import FloorPlanObject.FPObject;
import FloorPlanObject.Line;

public class EditViewPanel extends JPanel implements MouseListener, MouseMotionListener {
	
	/** For approach parent frame */
	EditFloorPlanFrame context;
	
	/** For approach current floor plan */
	private FloorPlan floorPlan;
	
	/** New object to insert floor plan */
	private FPObject tempObject;
	
	/** Temporary graphics for show object */
	private Graphics tempGraphics;
	
	private Line2D line;
	
	/** Decide now drawing or not */
	private boolean drawing = false;
	
	private int cursorX;
	private int cursorY;
	
	public EditViewPanel(EditFloorPlanFrame context, int width, int height, FloorPlan floorPlan) {
		super();
		this.floorPlan = floorPlan;
		this.context = context;
		this.setLayout(null);

		tempGraphics = context.getGraphics();
		tempGraphics.setColor(ColorData.DARK_GRAY);
		
		this.addMouseListener(this);
		this.addMouseMotionListener(this);

		this.setBackground(Color.WHITE);
		this.setBorder(BorderFactory.createLineBorder(ColorData.GRAY, 1));
		this.setPreferredSize(new Dimension(width, height));
		this.setSize(new Dimension(width, height));
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
		setDrawing(false);
	}

	@Override
	public void mousePressed(MouseEvent e) {
		if(DataProvider.getInstance().getCurrentObjectType() != null)
			switch(DataProvider.getInstance().getCurrentObjectType()) {
			case ICON:
				setDrawing(true);
				break;
				
			case LINE:
				tempObject = new Line(e.getX(), e.getY());
				setDrawing(true);
				repaint();
				break;
				
			case OVAL:
				setDrawing(true);
				break;
				
			case RECTANGLE:
				setDrawing(true);
				break;
				
			case TAG:
				setDrawing(true);
				break;
			}
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		setDrawing(false);
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		cursorX = this.getLocation().x + e.getX();
		cursorY = this.getLocation().y + e.getY();
	    line = new Line2D.Double(
	    		tempObject.getStartPosition(),
	    		new Point(cursorX, cursorY)
	    		); 
		repaint();
	}
	
	@Override
    public void paintComponent(Graphics g)
    { 
//        super.paintComponent(tempGraphics);
//		if(isDrawing() && DataProvider.getInstance().getCurrentObjectType() != null)
//			switch(DataProvider.getInstance().getCurrentObjectType()) {
//			case ICON:
//				break;
//				
//			case LINE:
//				repaint();
//				tempGraphics.drawLine(
//						this.getLocation().x + tempObject.getStartPosition().x,
//						this.getLocation().y + tempObject.getStartPosition().y,
//						cursorX,
//						cursorY
//						);
//				break;
//				
//			case OVAL:
//				break;
//				
//			case RECTANGLE:
//				break;
//				
//			case TAG:
//				break;
//			}
		
		Graphics2D g2d = (Graphics2D) g;
		if(isDrawing()) {
		g2d.setPaint(Color.RED);
		g2d.setStroke(new BasicStroke(1.5f));
		g2d.draw(line);
		}
    }

	@Override
	public void mouseMoved(MouseEvent e) {
	}

	public boolean isDrawing() {
		return drawing;
	}

	public void setDrawing(boolean drawing) {
		this.drawing = drawing;
	}
}
